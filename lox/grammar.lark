?start     : program

program    : declaration*

?declaration: var_decl
            | stmt
            | fun_decl

var_decl   : "var" VAR [":" type_hint] ["=" expr] ";"

?stmt      : expr ";"
           | print_cmd
           | block
           | if_stmt
           | while_stmt
           | for_stmt

print_cmd  : "print" expr ";"
block      : "{" declaration* "}"
if_stmt    : "if" "(" expr ")" stmt ["else" stmt]
while_stmt : "while" "(" expr ")" stmt
for_stmt   : "for" "(" for_init for_cond ";" for_incr ")" stmt

for_init   : var_decl | expr ";" | ";"
for_cond   : expr?
for_incr   : expr?

fun_decl   : "fun" VAR "(" [params_decl] ")" ["->" type_hint] block
params_decl: param_decl ("," param_decl)*
param_decl : VAR [":" type_hint]

type_hint  : TYPE_NAME ["?"]
TYPE_NAME  : /[a-zA-Z_]\w*/

// EXPRESSÃ•ES
?expr      : assignment

?assignment: call "." VAR "=" assignment   -> setattr
           | VAR "=" assignment           -> assign
           | logic_or

?logic_or  : logic_and
           | logic_or "or" logic_and   -> or_

?logic_and : equality
           | logic_and "and" equality  -> and_

?equality  : comparison
           | equality "==" comparison  -> eq
           | equality "!=" comparison  -> ne

?comparison: term
           | comparison ">" term       -> gt
           | comparison "<" term       -> lt
           | comparison ">=" term      -> ge
           | comparison "<=" term      -> le

?term      : factor
           | term "+" factor           -> add
           | term "-" factor           -> sub

?factor    : unary
           | factor "*" unary          -> mul
           | factor "/" unary          -> div

?unary     : "!" unary                 -> not_
           | "-" unary                 -> neg
           | call

?call      : primary
           | call "(" params ")"       -> call
           | call "." VAR              -> getattr

?primary   : NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

params     : [ expr ("," expr )* ]

BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT